{"version":3,"sources":["model/Quote.ts","model/Ticker.ts","datasource/DataSource.ts","datasource/AlphaVantage.ts","stores/QuoteStore.ts","model/Transaction.ts","model/AssetAllocation.ts","model/Transfer.ts","util/XIRR.ts","model/Account.ts","components/profile/ProfileView.tsx","components/Header.tsx","stores/ProfileStore.ts","stores/UiStore.ts","components/profile/StartModal.tsx","components/profile/FileModal.tsx","components/profile/ImportJSONButton.tsx","components/profile/LoadModal.tsx","components/profile/EditProfileModal.tsx","components/profile/DownloadProfileButton.tsx","components/profile/ExportModal.tsx","components/account/EditAccountModal.tsx","components/account/AccountSelector.tsx","components/transfer/TransferList.tsx","components/transaction/TransactionList.tsx","components/assetallocation/AssetAllocationList.tsx","components/account/AccountDetails.tsx","components/account/AccountDashboard.tsx","components/SecuritiesInfo.tsx","components/account/AccountBalancer.tsx","components/account/DisplayTabs.tsx","components/transfer/EditTransferModal.tsx","components/transaction/EditTransactionModal.tsx","components/assetallocation/EditAssetAllocationModal.tsx","App.tsx","stores/RootStore.ts","serviceWorker.ts","index.tsx"],"names":["QuoteStatus","Ticker","serializable","primitive","exchange","symbol","this","other","tickString","splits","split","sep","length","observable","computed","Quote","ticker","status","price","undefined","defaultSources","baseURL","apiKey","name","axios","get","quoteURL","response","Number","data","console","log","QuoteStore","sources","quotes","Map","instance","asString","has","set","Unfilled","q","fillQuote","quote","Fetching","setPrice","result","UserSpecified","Filled","source","getPrice","forEach","clear","Transaction","object","date","quantity","id","unitPrice","getInstance","getQuote","NaN","AssetAllocation","portion","Transfer","value","daysBetween","d1","d2","Math","round","getTime","calculateXIRR","transactions","dates","initialGuess","f","fPrime","nm","prev","iterations","isNaN","isFinite","estimate","abs","newtonsMethod","initialDate","xirr","i","pow","ndb","Account","list","transfers","assetAllocation","balance","array","assetTotal","qs","assets","qty","tick","fromString","t","currQty","reduce","acc","bookCost","trans","push","currentValue","Date","isObservableArray","slice","sort","a","b","ProfileView","observer","popover","style","textAlign","type","width","margin","size","icon","onClick","props","rs","us","profileVisible","profileModalVisible","loadModalVisible","exportModalVisible","content","trigger","visible","onVisibleChange","v","placement","title","ps","Component","Header","ProfileStore","mapAsArray","map","accounts","categories","ObservableMap","export","bind","Array","from","keys","file","callBack","_","reader","FileReader","onerror","e","abort","onload","deserialize","JSON","parse","validate","reset","replace","ex","readAsText","serialize","category","Set","values","add","UiStore","selectedAccount","loading","currentTransfer","currentTransaction","currentAssetAllocation","StartModal","centered","startModalVisible","onCancel","footer","zIndex","FileModal","onChange","onSubmit","currentFile","handleFile","visibility","target","files","okText","okButtonProps","disabled","onOk","accept","ImportJSONButton","load","success","notification","message","importFromJsonModalVisible","padding","whenDone","defaultProps","LoadModal","EditProfileModal","getFieldDecorator","form","getFieldValue","layout","Item","label","rules","required","initialValue","Form","create","DownloadProfileButton","psData","dataStr","encodeURIComponent","stringify","dlNode","document","createElement","setAttribute","body","appendChild","click","remove","error","ExportModal","EditAccountModal","action","editAccountModalVisible","creatingAccount","resetFields","shortid","generate","prepNewAccount","prepEditAccount","precision","AccountSelector","minWidth","placeholder","onSelect","Option","key","TransferList","bordered","transfer","actions","editTransferModalVisible","prefix","toDateString","TransactionList","transaction","editTransactionModalVisible","suffix","AssetAllocationList","clickHandler","aa","editAAModalVisible","AccountDetails","description","addTransfer","fontSize","theme","twoToneColor","stopPropagation","addTransaction","addAA","cancelText","onConfirm","delete","Panel","header","extra","AccountDashboard","currVal","dollarReturn","principal","pctReturn","SecuritiesInfo","tickers","getCategory","dataSource","rowKey","r","Column","dataIndex","render","AccountBalancer","totalValue","aaMap","ideals","costs","DisplayTabs","activeKey","currentTab","onTabClick","TabPane","tab","EditTransferModal","moment","toDate","sortTransfers","prepEdit","prepNew","format","EditTransactionModal","ct","EditAssetAllocationModal","findDuplicate","find","isEqual","dupe","Content","Layout","Footer","accs","accMap","config","top","App","className","minHeight","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.099ea7ba.chunk.js","sourcesContent":["import { Ticker } from \"./Ticker\";\nimport { observable } from \"mobx\";\n\nexport enum QuoteStatus {\n\tUserSpecified,\n\tFetching,\n\tFilled,\n\tUnfilled\n}\n\nexport default class Quote {\n\n\treadonly ticker: Ticker;\n\t@observable price: number | undefined;\n\t@observable status: QuoteStatus;\n\n\tconstructor(ticker: Ticker, status: QuoteStatus, price?: number) {\n\t\tthis.ticker = ticker;\n\t\tthis.status = status;\n\t\tthis.price = price;\n\t}\n\n\tclear() {\n\t\tthis.price = undefined;\n\t}\n}\n","import { observable, computed } from \"mobx\";\nimport { primitive, serializable } from \"serializr\";\n\n\nexport class Ticker {\n\t@observable @serializable(primitive()) exchange: string = \"\";\n\t@observable @serializable(primitive()) symbol: string = \"\";\n\tstatic sep: string = ':';\n\tconstructor(exchange: string, symbol: string) {\n\t\tthis.exchange = exchange;\n\t\tthis.symbol = symbol;\n\t}\n\n\t@computed\n\tget asString(): string {\n\t\treturn `${this.exchange}:${this.symbol}`;\n\t}\n\n\tstatic fromString(tickString: string): Ticker {\n\t\tconst splits = tickString.split(this.sep, 2);\n\t\tif (splits.length !== 2) return new Ticker(\"\", splits[0])\n\t\telse return new Ticker(splits[0], splits[1]);\n\t}\n\n\tisEqual(other: Ticker): boolean {\n\t\treturn other.exchange === this.exchange &&\n\t\t\tother.symbol === this.symbol;\n\t}\n}\n","import { Ticker } from \"../model/Ticker\";\nimport AlphaVantage from \"./AlphaVantage\";\n\n\nexport default interface DataSource {\n\tgetPrice(ticker: Ticker): Promise<number | undefined>;\n\treadonly name: string;\n}\n\nexport const defaultSources = [\n\tnew AlphaVantage()\n];\n","import DataSource from \"./DataSource\";\nimport { Ticker } from \"../model/Ticker\";\nimport axios from 'axios';\n\n\nexport default class AlphaVantage implements DataSource {\n\tprivate readonly baseURL: string = \"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\";\n\tprivate readonly apiKey: string = \"xxxx124avzxx\";\n\treadonly name: string = \"Alpha Vantage\";\n\n\tprivate quoteURL(ticker: Ticker): string {\n\t\treturn this.baseURL + `${ticker.exchange}:${ticker.symbol}&apikey=${this.apiKey}`;\n\t}\n\n\tasync getPrice(ticker: Ticker): Promise<number | undefined> {\n\t\ttry {\n\t\t\tconst response = await axios.get(this.quoteURL(ticker));\n\t\t\treturn Number(response.data[\"Global Quote\"][\"05. price\"]);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n","import { Ticker } from \"../model/Ticker\";\nimport Quote, { QuoteStatus } from \"../model/Quote\";\nimport DataSource, { defaultSources } from \"../datasource/DataSource\";\n\n\nexport default class QuoteStore {\n\tprivate static instance: QuoteStore;\n\tprivate quotes: Map<string, Quote> = new Map();\n\tprivate sources: DataSource[];\n\n\tpublic static getInstance(): QuoteStore {\n\t\tif (!this.instance) {\n\t\t\tthis.instance = new QuoteStore();\n\t\t}\n\t\treturn this.instance;\n\t}\n\n\tprivate constructor(sources: DataSource[] = defaultSources) {\n\t\tthis.sources = sources;\n\t}\n\n\tgetQuote(ticker: Ticker): Quote {\n\t\tconst tickString = ticker.asString;\n\t\tif (!this.quotes.has(tickString)) this.quotes.set(tickString, new Quote(ticker, QuoteStatus.Unfilled));\n\t\tlet q = this.quotes.get(tickString) as Quote;\n\t\tif (!q.price && q.status === QuoteStatus.Unfilled) this.fillQuote(q);\n\t\treturn q;\n\t}\n\n\tasync fillQuote(quote: Quote) {\n\t\t// todo: Consider doing this in parallel later?\n\t\tquote.status = QuoteStatus.Fetching;\n\t\tconst setPrice = (result: number) => {\n\t\t\tif (quote.status !== QuoteStatus.UserSpecified) {\n\t\t\t\tquote.price = result;\n\t\t\t\tquote.status = QuoteStatus.Filled;\n\t\t\t}\n\t\t}\n\t\tfor (const source of this.sources) {\n\t\t\tconst result = await source.getPrice(quote.ticker);\n\t\t\tif (result) {\n\t\t\t\tsetPrice(result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tquote.status = QuoteStatus.Unfilled;\n\t}\n\n\tsetPrice(ticker: Ticker, price: number) {\n\t\tconst tickString = ticker.asString;\n\t\tif (!this.quotes.has(tickString)) this.quotes.set(tickString, new Quote(ticker, QuoteStatus.UserSpecified, price));\n\t\telse {\n\t\t\tconst q = this.quotes.get(tickString) as Quote;\n\t\t\tq.price = price;\n\t\t\tq.status = QuoteStatus.UserSpecified;\n\t\t}\n\t}\n\n\tclearPrices() {\n\t\tthis.quotes.forEach(q => q.clear());\n\t}\n}\n","import { observable, computed } from \"mobx\"\nimport { Ticker } from \"./Ticker\";\nimport { object, primitive, date, serializable } from \"serializr\";\nimport QuoteStore from \"../stores/QuoteStore\";\nimport { QuoteStatus } from \"./Quote\";\n\nexport class Transaction {\n\t@observable @serializable(object(Ticker)) ticker: Ticker;\n\t@observable @serializable(primitive()) quantity: number;\n\t@observable @serializable(date()) date: Date;\n\t@observable @serializable(primitive()) unitPrice: number;\n\t@serializable(primitive()) readonly id: string;\n\n\t@computed get bookCost(): number {\n\t\treturn this.unitPrice * this.quantity;\n\t}\n\n\t@computed get currentValue(): number {\n\t\tconst qs = QuoteStore.getInstance();\n\t\tconst quote = qs.getQuote(this.ticker);\n\t\tif (quote.status === QuoteStatus.Unfilled || quote.status === QuoteStatus.Fetching || quote.price === undefined) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn quote.price;\n\t}\n\n\tconstructor(ticker: Ticker, quantity: number, price: number, id: string, date: Date) {\n\t\tthis.ticker = ticker;\n\t\tthis.quantity = quantity;\n\t\tthis.unitPrice = price;\n\t\tthis.id = id;\n\t\tthis.date = date;\n\t}\n}\n","import { observable } from \"mobx\";\nimport { Ticker } from \"./Ticker\";\nimport { object, primitive, serializable } from \"serializr\";\n\nexport default class AssetAllocation {\n\t@observable @serializable(object(Ticker)) ticker: Ticker;\n\t@observable @serializable(primitive()) portion: number;\n\n\tconstructor(ticker: Ticker, portion: number) {\n\t\tthis.ticker = ticker;\n\t\tthis.portion = portion;\n\t}\n}\n","import { observable } from \"mobx\";\nimport { primitive, date, serializable } from \"serializr\";\n\n\nexport default class Transfer {\n\t@observable @serializable(primitive()) value: number;\n\t@observable @serializable(date()) date: Date;\n\t@serializable(primitive()) readonly id: string;\n\n\tconstructor(value: number, date: Date, id: string) {\n\t\tthis.value = value;\n\t\tthis.date = date;\n\t\tthis.id = id;\n\t}\n}\n","/**\n * A utility for calculating the irregular internal rate of return for transactions\n */\nconst maxIterations = 100;\nconst tolerance = 1e-5;\nconst dayInMs = 1000 * 60 * 60 * 24;\n\nconst newtonsMethod = (initialGuess: number, f: (x: number) => number, fPrime: (x: number) => number) => {\n\tconst nm = (prev: number, iterations: number): number => {\n\t\tif (iterations === maxIterations || isNaN(prev) || !isFinite(prev)) return NaN;\n\t\tconst estimate = prev - f(prev) / fPrime(prev);\n\t\t// console.log(\"est: \" + estimate + \", prev: \" + prev + \", f: \" + f(prev), \", f`: \" + fPrime(prev));\n\t\tif (Math.abs(estimate - prev) < tolerance) return estimate;\n\t\telse return nm(estimate, iterations + 1);\n\t}\n\treturn nm(initialGuess, 0);\n}\n\nexport const daysBetween = (d1: Date, d2: Date) => Math.round((d2.getTime() - d1.getTime()) / dayInMs);\n\nconst f = (transactions: number[], dates: Date[]) => {\n\tconst initialDate = dates[0];\n\treturn (xirr: number) => {\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < dates.length; ++i) {\n\t\t\tresult += transactions[i] / Math.pow(1 + xirr, daysBetween(initialDate, dates[i]) / 365.0);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nconst fPrime = (transactions: number[], dates: Date[]) => {\n\tconst initialDate = dates[0];\n\treturn (xirr: number) => {\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < dates.length; ++i) {\n\t\t\tconst ndb = daysBetween(dates[i], initialDate);\n\t\t\tresult += transactions[i] / 365.0 * ndb * Math.pow(1 + xirr, ndb / 365.0 - 1.0);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/** Calculates the XIRR for a series of transactions.\n *\n *  The sequence of transactions should be sorted in chronological order,\n *  and should contain at least two transactions.\n */\nexport const calculateXIRR = (transactions: number[], dates: Date[]) => {\n\tif (transactions.length < 2) {\n\t\tconsole.log(\"Not enough transactions to calculate XIRR.\");\n\t\treturn NaN;\n\t}\n\tif (transactions.length !== dates.length) {\n\t\tconsole.log(\"Number of dates and transactions must be the same.\")\n\t\treturn NaN;\n\t}\n\treturn newtonsMethod(0.10, f(transactions, dates), fPrime(transactions, dates));\n}\n","import { Transaction } from \"./Transaction\";\nimport { computed, observable, IObservableArray, isObservableArray } from \"mobx\";\nimport AssetAllocation from \"./AssetAllocation\";\nimport Transfer from \"./Transfer\";\nimport { primitive, list, object, serializable } from \"serializr\";\nimport { Ticker } from \"./Ticker\";\nimport QuoteStore from \"../stores/QuoteStore\";\nimport { QuoteStatus } from \"./Quote\";\nimport { calculateXIRR } from \"../util/XIRR\";\n\n\nexport class Account {\n\t@observable @serializable(primitive()) name: string = \"\";\n\t@observable @serializable(list(object(Transaction))) transactions: Transaction[];\n\t@observable @serializable(list(object(Transfer))) transfers: IObservableArray<Transfer>;\n\t@observable @serializable(primitive()) balance: number = 0;\n\t@observable @serializable(list(object(AssetAllocation))) assetAllocation: AssetAllocation[];\n\t@serializable(primitive()) readonly id: string;\n\n\t@computed get assets(): Map<string, number> {\n\t\tlet result = new Map<string, number>();\n\t\tthis.transactions.forEach(t => {\n\t\t\tconst tickString = t.ticker.asString;\n\t\t\tconst currQty = result.get(tickString) ? result.get(tickString) as number : 0;\n\t\t\tresult.set(tickString, currQty + t.quantity);\n\t\t});\n\t\treturn result;\n\t}\n\n\tcurrentValue(): number {\n\t\tlet assetTotal = 0;\n\t\tconst qs = QuoteStore.getInstance();\n\t\tthis.assets.forEach((qty, tick) => {\n\t\t\tconst quote = qs.getQuote(Ticker.fromString(tick));\n\t\t\tif (quote.status !== QuoteStatus.Unfilled && quote.status !== QuoteStatus.Fetching && quote.price !== undefined) {\n\t\t\t\tassetTotal += quote.price * qty;\n\t\t\t}\n\t\t});\n\t\treturn assetTotal + this.balance;\n\t}\n\n\t@computed get bookValue(): number {\n\t\treturn this.transactions.reduce((acc, t) => acc + t.bookCost, 0);\n\t}\n\n\t@computed get principal(): number {\n\t\treturn this.transfers.reduce((acc, t) => acc + t.value, 0);\n\t}\n\n\t@computed get xirr(): number {\n\t\tconst trans: number[] = [];\n\t\tconst dates: Date[] = [];\n\t\tthis.transfers.forEach(t => {\n\t\t\ttrans.push(t.value);\n\t\t\tdates.push(t.date);\n\t\t});\n\t\ttrans.push(-this.currentValue());\n\t\tdates.push(new Date());\n\t\treturn calculateXIRR(trans, dates);\n\t}\n\n\tconstructor(name: string, transactions: Transaction[], transfers: Transfer[], assetAllocation: AssetAllocation[], balance: number, id: string) {\n\t\tthis.name = name;\n\t\tthis.transactions = transactions;\n\t\tthis.transfers = observable.array<Transfer>(transfers);\n\t\tthis.balance = balance;\n\t\tthis.id = id;\n\t\tthis.assetAllocation = assetAllocation;\n\t}\n\n\tsortTransfers() {\n\t\tconsole.log(isObservableArray(this.transfers));\n\t\tthis.transfers.slice().sort(\n\t\t\t(a: Transfer, b: Transfer) => a.date.getTime() - b.date.getTime()\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Popover, Button, Icon } from \"antd\";\nimport RootStore from \"../../stores/RootStore\";\n\n\n@observer\nexport default class ProfileView extends Component<{rs: RootStore}> {\n\trender() {\n\t\tconst popover = (\n\t\t<div style={{textAlign: \"center\"}}>\n\t\t\t<Button\n\t\t\t\ttype=\"primary\"\n\t\t\t\tstyle={{width: \"auto\", margin: 10}}\n\t\t\t\tsize=\"large\"\n\t\t\t\ticon=\"edit\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tthis.props.rs.us.profileVisible = false;\n\t\t\t\t\tthis.props.rs.us.profileModalVisible = true;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tEdit Profile\n\t\t\t</Button>\n\t\t\t<br/>\n\t\t\t<Button\n\t\t\t\ttype=\"primary\"\n\t\t\t\tstyle={{width: 100, margin: 10}}\n\t\t\t\tsize=\"large\"\n\t\t\t\ticon=\"import\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tthis.props.rs.us.profileVisible = false;\n\t\t\t\t\tthis.props.rs.us.loadModalVisible = true;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tLoad\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\ttype=\"primary\"\n\t\t\t\tstyle={{width: 100, margin: 10}}\n\t\t\t\tsize=\"large\"\n\t\t\t\ticon=\"import\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tthis.props.rs.us.profileVisible = false;\n\t\t\t\t\tthis.props.rs.us.exportModalVisible = true;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tExport\n\t\t\t</Button>\n\t\t</div>\n\t\t);\n\n\t\treturn <Popover\n\t\t\tcontent={popover}\n\t\t\ttrigger=\"click\"\n\t\t\tvisible={this.props.rs.us.profileVisible}\n\t\t\tonVisibleChange={v => this.props.rs.us.profileVisible = v}\n\t\t\tplacement=\"top\"\n\t\t\ttitle=\"Profile Settings\"\n\t\t>\n\t\t\t<Button onClick={() => this.props.rs.us.profileVisible = true}>\n\t\t\t\t<Icon type=\"profile\"></Icon>\n\t\t\t\tProfile - {this.props.rs.ps.name}\n\t\t\t</Button>\n\t\t</Popover>\n\t}\n}\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Layout } from \"antd\";\nimport ProfileView from \"./profile/ProfileView\";\nimport RootStore from \"../stores/RootStore\";\n\n\n@observer\nexport default class Header extends Component<{rs: RootStore}> {\n\trender() {\n\t\treturn <Layout.Header>\n\t\t\t<ProfileView\n\t\t\t\trs={this.props.rs}\n\t\t\t></ProfileView>\n\t\t</Layout.Header>\n\t}\n}\n","import { observable, ObservableMap, computed } from \"mobx\";\nimport { Account } from \"../model/Account\";\nimport { serialize, object, primitive, deserialize, serializable, mapAsArray, map } from \"serializr\";\nimport UiStore from \"./UiStore\";\nimport { Ticker } from \"../model/Ticker\";\n\n\nexport class ProfileStore {\n\t@observable\n\t@serializable(primitive())\n\tname: string;\n\n\t@serializable(mapAsArray(object(Account), \"id\"))\n\taccounts: ObservableMap;\n\n\t@serializable(map(primitive()))\n\tcategories: ObservableMap;\n\n\tconstructor(name: string, accounts: Map<string, Account>, categories: Map<string, string>, private us: UiStore) {\n\t\tthis.name = name;\n\t\tthis.accounts = new ObservableMap(accounts);\n\t\tthis.export = this.export.bind(this);\n\t\tthis.categories = new ObservableMap(categories);\n\t}\n\n\tvalidate(other: ProfileStore): boolean {\n\t\tif ((typeof other.name) !== \"string\") return false;\n\t\tfor (let k of Array.from(other.accounts.keys())) {\n\t\t\tif (k === undefined) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tload(file: File, callBack: (success: boolean) => any = (_: boolean) => ({})): boolean {\n\t\tconst reader = new FileReader();\n\t\treader.onerror = e => {\n\t\t\treader.abort();\n\t\t\tcallBack(false);\n\t\t}\n\t\treader.onload = _ => {\n\t\t\ttry {\n\t\t\t\tconst other = deserialize(ProfileStore, JSON.parse(reader.result as string) as Object);\n\t\t\t\tif (this.validate(other)) {\n\t\t\t\t\tthis.us.reset();\n\t\t\t\t\tthis.name = other.name;\n\t\t\t\t\tthis.accounts.replace(other.accounts);\n\t\t\t\t\tthis.categories.replace(other.categories);\n\t\t\t\t\tcallBack(true);\n\t\t\t\t} else {\n\t\t\t\t\tcallBack(false);\n\t\t\t\t}\n\t\t\t} catch (ex) {\n\t\t\t\tcallBack(false);\n\t\t\t}\n\t\t}\n\t\treader.readAsText(file);\n\t\treturn false;\n\t}\n\n\texport(): Object | undefined {\n\t\ttry {\n\t\t\tconst result = serialize(this)\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t@computed get tickers(): Set<string> {\n\t\tconst result = new Set<string>();\n\t\tfor (const acc of Array.from(this.accounts.values()) as Account[]) {\n\t\t\tfor (const t of acc.transactions) {\n\t\t\t\tresult.add(t.ticker.asString);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetCategory(ticker: Ticker): string {\n\t\tconst tickString = ticker.asString;\n\t\tif (!this.categories.has(tickString)) this.categories.set(tickString, \"\");\n\t\treturn this.categories.get(tickString) as string;\n\t}\n\n\tsetCategory(ticker: Ticker, category: string) {\n\t\tthis.categories.set(ticker.asString, category);\n\t}\n}\n","import { observable } from \"mobx\";\nimport Transfer from \"../model/Transfer\";\nimport { Transaction } from \"../model/Transaction\";\nimport AssetAllocation from \"../model/AssetAllocation\";\n\n\nexport default class UiStore {\n\t@observable loading: boolean = false;\n\n\t@observable profileVisible: boolean = false;\n\t@observable profileModalVisible: boolean = false;\n\n\t@observable startModalVisible: boolean = true;\n\t@observable importFromJsonModalVisible: boolean = false;\n\t@observable loadModalVisible: boolean = false;\n\t@observable exportModalVisible: boolean = false;\n\n\t@observable selectedAccount: string = \"\";\n\t@observable editAccountModalVisible: boolean = false;\n\t@observable creatingAccount: boolean = false;\n\n\t@observable currentTab: string = \"dashboard\";\n\n\t@observable editTransferModalVisible: boolean = false;\n\t@observable currentTransfer?: Transfer = undefined;\n\n\t@observable editTransactionModalVisible: boolean = false;\n\t@observable currentTransaction?: Transaction = undefined;\n\n\t@observable editAAModalVisible: boolean = false;\n\t@observable currentAssetAllocation?: AssetAllocation = undefined;\n\n\treset() {\n\t\tthis.selectedAccount = \"\";\n\t\tthis.loading = false;\n\t\tthis.currentTransfer = undefined;\n\t\tthis.currentTransaction = undefined;\n\t\tthis.currentAssetAllocation = undefined;\n\t}\n}\n","import React from \"react\";\nimport RootStore from \"../../stores/RootStore\";\nimport { Modal, Button } from \"antd\";\nimport { observer } from \"mobx-react\";\n\n\nexport const StartModal = observer((props: {rs: RootStore}) => (<Modal\n\t\tcentered\n\t\tvisible={props.rs.us.startModalVisible}\n\t\ttitle=\"Get Started\"\n\t\tonCancel={() => props.rs.us.startModalVisible = false}\n\t\tfooter={null}\n\t\tzIndex={1090}\n\t\twidth=\"auto\"\n\t>\n\t\t<Button\n\t\t\ttype=\"primary\"\n\t\t\tstyle={{width: 100, margin: 10}}\n\t\t\tsize=\"large\"\n\t\t\ticon=\"import\"\n\t\t\tonClick={() => {\n\t\t\t\tprops.rs.us.startModalVisible = false;\n\t\t\t\tprops.rs.us.loadModalVisible = true;\n\t\t\t}}\n\t\t>\n\t\t\tLoad\n\t\t</Button>\n\t\t<Button\n\t\t\ttype=\"primary\"\n\t\t\tstyle={{width: 100, margin: 10}}\n\t\t\tsize=\"large\"\n\t\t\ticon=\"plus\"\n\t\t\tonClick={() => {\n\t\t\t\tprops.rs.us.startModalVisible = false;\n\t\t\t\tprops.rs.us.profileModalVisible = true;\n\t\t\t}}\n\t\t>\n\t\t\tNew\n\t\t</Button>\n\t</Modal>)\n);","import React, { Component, ChangeEvent } from \"react\";\nimport { Modal } from \"antd\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\n\ninterface FileModalProps {\n\tokText: string;\n\ttitle: string;\n\thandleFile: (file: File) => void;\n\tvisibility: (vis?: boolean) => boolean;\n}\n\n@observer\nexport default class FileModal extends Component<FileModalProps> {\n\t@observable private currentFile: File | undefined;\n\n\tconstructor(props: FileModalProps) {\n\t\tsuper(props);\n\t\tthis.onChange = this.onChange.bind(this);\n\t\tthis.onSubmit = this.onSubmit.bind(this);\n\t}\n\n\tonSubmit() {\n\t\tif (this.currentFile) {\n\t\t\tthis.props.handleFile(this.currentFile);\n\t\t\tthis.props.visibility(false);\n\t\t}\n\t}\n\n\tonChange(e: ChangeEvent<HTMLInputElement>) {\n\t\tif (e.target.files) this.currentFile = e.target.files[0];\n\t}\n\n\trender() {\n\t\treturn <Modal\n\t\t\twidth=\"auto\"\n\t\t\tcentered\n\t\t\tvisible={this.props.visibility()}\n\t\t\ttitle={this.props.title}\n\t\t\tokText={this.props.okText}\n\t\t\tzIndex={1100} // To overlay popovers\n\t\t\tokButtonProps={{ disabled: !this.currentFile }}\n\t\t\tonCancel={() => this.props.visibility(false)}\n\t\t\tonOk={this.onSubmit}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"file\"\n\t\t\t\taccept=\".json\"\n\t\t\t\tonChange={this.onChange}\n\t\t\t></input>\n\t\t</Modal>\n\t}\n}\n","import React, { Component } from \"react\";\nimport { Button, notification } from \"antd\";\nimport FileModal from \"./FileModal\";\nimport RootStore from \"../../stores/RootStore\";\n\ninterface Props {\n\trs: RootStore;\n\twhenDone: () => void;\n}\n\nexport default class ImportJSONButton extends Component<Props, {}>{\n\tpublic static defaultProps = {\n\t\twhenDone: () => ({})\n\t};\n\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.handleFile = this.handleFile.bind(this);\n\t\tthis.visibility = this.visibility.bind(this);\n\t}\n\n\thandleFile(file: File) {\n\t\tthis.props.rs.us.loading = true;\n\t\tthis.props.rs.ps.load(file, (success: boolean) => {\n\t\t\tif (success) {\n\t\t\t\tnotification['success']({message: \"Profile successfully loaded.\"});\n\t\t\t} else {\n\t\t\t\tnotification['error']({message: \"Profile could not be loaded.\"});\n\t\t\t}\n\t\t\tthis.props.rs.us.loading = false;\n\t\t});\n\t}\n\n\tvisibility(v?: boolean): boolean {\n\t\tif (v !== undefined) this.props.rs.us.importFromJsonModalVisible = v;\n\t\treturn this.props.rs.us.importFromJsonModalVisible;\n\t}\n\n\trender() {\n\t\tconst onClick = () => {\n\t\t\tthis.props.rs.us.importFromJsonModalVisible = true;\n\t\t\tthis.props.whenDone();\n\t\t}\n\t\treturn <div style={{ padding: 0 }}>\n\t\t\t<Button\n\t\t\t\tonClick={onClick}\n\t\t\t\ticon=\"import\"\n\t\t\t\ttype=\"primary\"\n\t\t\t\tsize=\"large\"\n\t\t\t\tstyle={{margin: 0}}\n\t\t\t>\n\t\t\t\tImport a profile from file\n\t\t\t</Button>\n\t\t\t<FileModal\n\t\t\t\thandleFile={this.handleFile}\n\t\t\t\tvisibility={this.visibility}\n\t\t\t\ttitle=\"Import a profile from file\"\n\t\t\t\tokText=\"Import\"\n\t\t\t></FileModal>\n\t\t</div>\n\t}\n}","import { observer } from \"mobx-react\";\nimport RootStore from \"../../stores/RootStore\";\nimport { Modal } from \"antd\";\nimport React from \"react\";\nimport ImportJSONButton from \"./ImportJSONButton\";\n\n\nexport const LoadModal = observer((props: {rs: RootStore}) => (\n\t<Modal\n\t\tcentered\n\t\tvisible={props.rs.us.loadModalVisible}\n\t\ttitle=\"Load a profile\"\n\t\tonCancel={() => props.rs.us.loadModalVisible = false}\n\t\tfooter={null}\n\t\tzIndex={1100}\n\t\twidth=\"auto\"\n\t>\n\t\t<ImportJSONButton\n\t\t\trs={props.rs}\n\t\t\twhenDone={() => props.rs.us.loadModalVisible = false}\n\t\t/>\n\t</Modal>\n));\n","import RootStore from \"../../stores/RootStore\";\nimport React, { Component } from \"react\";\nimport { Modal, Form, Input } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { observer } from \"mobx-react\";\n\n\ninterface Props {\n\trs: RootStore\n};\n\n@observer\nclass EditProfileModal extends Component<Props & FormComponentProps> {\n\trender() {\n\t\tconst { getFieldDecorator } = this.props.form;\n\t\treturn <Modal\n\t\t\tcentered\n\t\t\tvisible={this.props.rs.us.profileModalVisible}\n\t\t\ttitle=\"Edit your profile\"\n\t\t\tonCancel={() => this.props.rs.us.profileModalVisible = false}\n\t\t\tonOk={() => {\n\t\t\t\tthis.props.rs.ps.name = this.props.form.getFieldValue(\"name\");\n\t\t\t\tthis.props.rs.us.profileModalVisible = false;\n\t\t\t}}\n\t\t>\n\t\t\t<Form layout=\"vertical\">\n\t\t\t\t<Form.Item label=\"Profile Name\">\n\t\t\t\t\t{ getFieldDecorator(\"name\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input profile name\"}],\n\t\t\t\t\t\tinitialValue: `${this.props.rs.ps.name}`\n\t\t\t\t\t})(<Input/>)}\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Modal>;\n\t}\n}\n\nexport default Form.create<Props & FormComponentProps>()(EditProfileModal);\n","import React, { Component } from \"react\";\nimport { Button, message } from \"antd\";\nimport RootStore from \"../../stores/RootStore\";\n\ninterface Props {\n\trs: RootStore;\n\twhenDone: () => void;\n}\n\nexport default class DownloadProfileButton extends Component<Props, {}>{\n\tpublic static defaultProps = {\n\t\twhenDone: () => ({})\n\t};\n\n\trender() {\n\t\tconst onClick = () => {\n\t\t\tthis.props.whenDone();\n\t\t\tconst psData = this.props.rs.ps.export();\n\t\t\tif (psData) {\n\t\t\t\tconst dataStr = \"data:text/json;charset=utf-8,\" +\n\t\t\t\t\tencodeURIComponent(JSON.stringify(psData));\n\t\t\t\tconst dlNode = document.createElement(\"a\");\n\t\t\t\tdlNode.setAttribute(\"href\", dataStr);\n\t\t\t\tdlNode.setAttribute(\"download\", \"profile.json\");\n\t\t\t\tdocument.body.appendChild(dlNode);\n\t\t\t\tdlNode.click();\n\t\t\t\tdlNode.remove();\n\t\t\t} else {\n\t\t\t\tmessage.error(\"Failed to export profile.\");\n\t\t\t}\n\t\t}\n\t\treturn <div style={{ padding: 0 }}>\n\t\t\t<Button\n\t\t\t\tonClick={onClick}\n\t\t\t\ticon=\"download\"\n\t\t\t\ttype=\"primary\"\n\t\t\t\tsize=\"large\"\n\t\t\t\tstyle={{margin: 0}}\n\t\t\t>\n\t\t\t\tDownload your profile\n\t\t\t</Button>\n\t\t</div>\n\t}\n}","import { observer } from \"mobx-react\";\nimport RootStore from \"../../stores/RootStore\";\nimport { Modal } from \"antd\";\nimport React from \"react\";\nimport DownloadProfileButton from \"./DownloadProfileButton\";\n\n\nexport const ExportModal = observer((props: {rs: RootStore}) => (\n\t<Modal\n\t\tcentered\n\t\tvisible={props.rs.us.exportModalVisible}\n\t\ttitle=\"Save your profile\"\n\t\tonCancel={() => props.rs.us.exportModalVisible = false}\n\t\tfooter={null}\n\t\tzIndex={1100}\n\t\twidth=\"auto\"\n\t>\n\t\t<DownloadProfileButton\n\t\t\trs={props.rs}\n\t\t\twhenDone={() => props.rs.us.exportModalVisible = false}\n\t\t/>\n\t</Modal>\n));\n","import RootStore from \"../../stores/RootStore\";\nimport React, { Component } from \"react\";\nimport { Modal, Form, Input, InputNumber } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { observer } from \"mobx-react\";\nimport { Account } from \"../../model/Account\";\nimport shortid from \"shortid\";\n\n\ninterface Props {\n\trs: RootStore\n};\n\n@observer\nclass EditAccountModal extends Component<Props & FormComponentProps> {\n\tprivate action: string = \"\";\n\tprivate name: string = \"\";\n\tprivate balance: number = 0;\n\n\tconstructor(props: Props & FormComponentProps) {\n\t\tsuper(props);\n\t\tthis.onCancel = this.onCancel.bind(this);\n\t\tthis.onOk = this.onOk.bind(this);\n\t}\n\n\tonCancel() {\n\t\tthis.props.rs.us.editAccountModalVisible = false\n\t\tthis.props.rs.us.creatingAccount = false\n\t\tthis.props.form.resetFields();\n\t}\n\n\tonOk() {\n\t\tconst us = this.props.rs.us;\n\t\tconst name = this.props.form.getFieldValue(\"name\");\n\t\tconst balance = this.props.form.getFieldValue(\"balance\");\n\t\tif (this.props.rs.us.creatingAccount) {\n\t\t\tlet acc = new Account(name, [], [], [], balance, shortid.generate());\n\t\t\tthis.props.rs.ps.accounts.set(acc.id, acc);\n\t\t\tus.selectedAccount = acc.id;\n\t\t} else {\n\t\t\tconst acc = this.props.rs.ps.accounts.get(us.selectedAccount);\n\t\t\tif (acc) {\n\t\t\t\tacc.name = name;\n\t\t\t\tacc.balance = balance;\n\t\t\t}\n\t\t}\n\t\tthis.onCancel();\n\t}\n\n\tprepNewAccount() {\n\t\tthis.action = \"Create\"\n\t\tthis.name = \"\";\n\t\tthis.balance = 0;\n\t}\n\n\tprepEditAccount() {\n\t\tconst us = this.props.rs.us;\n\t\tconst acc = this.props.rs.ps.accounts.get(us.selectedAccount);\n\t\tthis.action = \"Edit\";\n\t\tthis.name = acc?.name as string;\n\t\tthis.balance = acc?.balance as number;\n\t}\n\n\trender() {\n\t\tconst us = this.props.rs.us;\n\t\tconst { getFieldDecorator } = this.props.form;\n\t\tif (us.creatingAccount) {\n\t\t\tthis.prepNewAccount();\n\t\t} else if (us.selectedAccount !== \"\") {\n\t\t\tthis.prepEditAccount();\n\t\t}\n\t\treturn <Modal\n\t\t\tcentered\n\t\t\tvisible={us.editAccountModalVisible}\n\t\t\ttitle={this.action + \" account\"}\n\t\t\tonCancel={this.onCancel}\n\t\t\tonOk={this.onOk}\n\t\t>\n\t\t\t<Form layout=\"vertical\">\n\t\t\t\t<Form.Item label=\"Account Name\">\n\t\t\t\t\t{ getFieldDecorator(\"name\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input account name\"}],\n\t\t\t\t\t\tinitialValue: `${this.name}`\n\t\t\t\t\t})(<Input/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Current Balance\">\n\t\t\t\t\t{ getFieldDecorator(\"balance\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input current balance\"}],\n\t\t\t\t\t\tinitialValue: `${this.balance}`\n\t\t\t\t\t})(<InputNumber precision={2}/>)}\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Modal>;\n\t}\n}\n\nexport default Form.create<Props & FormComponentProps>()(EditAccountModal);\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport RootStore from \"../../stores/RootStore\";\nimport { Select } from \"antd\";\n\n\n@observer\nexport default class AccountSelector extends Component<{rs: RootStore}> {\n\trender() {\n\t\tconst accounts = Array.from(this.props.rs.ps.accounts.values())\n\t\tconst onSelect = (e: string) => {\n\t\t\tif (e !== \"new\") this.props.rs.us.selectedAccount = e;\n\t\t\telse {\n\t\t\t\tthis.props.rs.us.creatingAccount = true;\n\t\t\t\tthis.props.rs.us.editAccountModalVisible = true;\n\t\t\t}\n\t\t};\n\t\treturn <Select\n\t\t\tsize=\"large\"\n\t\t\tstyle={{width: \"auto\", minWidth: 200}}\n\t\t\tplaceholder=\"Select an account\"\n\t\t\tvalue={this.props.rs.us.selectedAccount}\n\t\t\tonSelect={onSelect}\n\t\t>\n\t\t\t{accounts.map(a =>\n\t\t\t\t<Select.Option key={a.id}>{a.name}</Select.Option>\n\t\t\t)}\n\t\t\t<Select.Option key=\"new\">Create a new account</Select.Option>\n\t\t</Select>\n\t}\n}\n","import { observer } from \"mobx-react\";\nimport RootStore from \"../../stores/RootStore\";\nimport React from \"react\";\nimport { List, Button, Statistic } from \"antd\";\nimport { Account } from \"../../model/Account\";\nimport Transfer from \"../../model/Transfer\";\n\n\nexport const TransferList = observer((props: { rs: RootStore }) => {\n\tconst us = props.rs.us;\n\tconst acc = props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\tconst onClickGen = (t: Transfer) => {\n\t\treturn (_: React.MouseEvent<HTMLElement, MouseEvent>) => {\n\t\t\tus.currentTransfer = t;\n\t\t\tus.editTransferModalVisible = true;\n\t\t}\n\t}\n\treturn <List\n\tbordered={false}\n\t>\n\t\t{acc.transfers.map((transfer: Transfer) => {\n\t\t\treturn <List.Item key={transfer.id} actions={[\n\t\t\t\t<Button icon=\"edit\" type=\"primary\" onClick={onClickGen(transfer)}>Edit</Button>\n\t\t\t]}>\n\t \t\t\t<Statistic prefix=\"$\" title=\"Cash Transfer of\" value={transfer.value} precision={2}/>\n\t \t\t\t<Statistic title=\"on\" value={transfer.date.toDateString()}/>\n\t\t\t</List.Item>\n\t\t})}\n\t</List>;\n});\n","import { observer } from \"mobx-react\";\nimport RootStore from \"../../stores/RootStore\";\nimport React from \"react\";\nimport { List, Button, Statistic } from \"antd\";\nimport { Account } from \"../../model/Account\";\nimport { Transaction } from \"../../model/Transaction\";\n\n\nexport const TransactionList = observer((props: { rs: RootStore }) => {\n\tconst us = props.rs.us;\n\tconst acc = props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\tconst onClickGen = (t: Transaction) => {\n\t\treturn (_: React.MouseEvent<HTMLElement, MouseEvent>) => {\n\t\t\tus.currentTransaction = t;\n\t\t\tus.editTransactionModalVisible = true;\n\t\t}\n\t}\n\treturn <List\n\tbordered={false}\n\t>\n\t\t{acc.transactions.map((transaction: Transaction) => {\n\t\t\tconst action = transaction.quantity >= 0 ? \"Bought\" : \"Sold\";\n\t\t\treturn <List.Item key={transaction.id} actions={[\n\t\t\t\t<Button icon=\"edit\" type=\"primary\" onClick={onClickGen(transaction)}>Edit</Button>\n\t\t\t]}>\n\t\t\t\t<Statistic title={action} value={transaction.quantity}/>\n\t \t\t\t<Statistic title=\"of\" value={transaction.ticker.asString}/>\n\t \t\t\t<Statistic prefix=\"$\" suffix=\"per share\" title=\"at\" value={transaction.unitPrice} precision={2}/>\n\t\t\t</List.Item>\n\t\t})}\n\t</List>;\n});\n","import { observer } from \"mobx-react\";\nimport RootStore from \"../../stores/RootStore\";\nimport React from \"react\";\nimport { List, Button, Statistic } from \"antd\";\nimport { Account } from \"../../model/Account\";\nimport AssetAllocation from \"../../model/AssetAllocation\";\n\n\n\nexport const AssetAllocationList = observer((props: {rs: RootStore}) => {\n\tconst us = props.rs.us;\n\tconst acc = props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\tconst clickHandler = (aa: AssetAllocation) => {\n\t\treturn (_: React.MouseEvent<HTMLElement, MouseEvent>) => {\n\t\t\tus.currentAssetAllocation = aa;\n\t\t\tus.editAAModalVisible = true;\n\t\t}\n\t}\n\treturn <List\n\tbordered={false}\n\t>\n\t\t{\n\t\t\tacc.assetAllocation.map((aa: AssetAllocation) => {\n\t\t\t\treturn <List.Item key={aa.ticker.asString} actions={[\n\t\t\t\t\t<Button icon=\"edit\" type=\"primary\" onClick={clickHandler(aa)}>Edit</Button>\n\t\t\t\t]}>\n\t\t\t\t\t<Statistic value={aa.ticker.asString}/>\n\t\t\t\t\t<Statistic suffix=\"%\" value={aa.portion * 100} precision={2}/>\n\t\t\t\t</List.Item>\n\t\t\t})\n\t\t}\n\t</List>;\n});\n","import React, { Component } from \"react\";\nimport RootStore from \"../../stores/RootStore\";\nimport { observer } from \"mobx-react\";\nimport { Descriptions, Icon, Empty, Button, Collapse, Popconfirm } from \"antd\";\nimport { Account } from \"../../model/Account\";\nimport { TransferList } from \"../transfer/TransferList\";\nimport { TransactionList } from \"../transaction/TransactionList\";\nimport { AssetAllocationList } from \"../assetallocation/AssetAllocationList\";\n\n\n@observer\nexport default class AccountDetails extends Component<{rs: RootStore}> {\n\trender() {\n\t\tconst us = this.props.rs.us;\n\t\tif (us.selectedAccount === \"\") {\n\t\t\treturn <div style={{textAlign: \"center\"}}>\n\t\t\t\t<Empty description=\"Select an account\"/>\n\t\t\t</div>;\n\t\t} else {\n\t\t\tconst acc = this.props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\t\t\tconst onConfirm = () => {\n\t\t\t\tus.selectedAccount = \"\";\n\t\t\t\tthis.props.rs.ps.accounts.delete(acc.id);\n\t\t\t}\n\t\t\t// add buttons\n\t\t\tconst addTransfer = <Icon\n\t\t\t\tstyle={{fontSize:20}}\n\t\t\t\ttype=\"plus-square\"\n\t\t\t\ttheme=\"twoTone\"\n\t\t\t\ttwoToneColor=\"#65c765\"\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tus.editTransferModalVisible = true;\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}}\n\t\t\t/>;\n\t\t\tconst addTransaction = <Icon\n\t\t\t\tstyle={{fontSize:20}}\n\t\t\t\ttype=\"plus-square\"\n\t\t\t\ttheme=\"twoTone\"\n\t\t\t\ttwoToneColor=\"#65c765\"\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tus.editTransactionModalVisible = true;\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}}\n\t\t\t/>;\n\t\t\tconst addAA = <Icon\n\t\t\t\tstyle={{fontSize:20}}\n\t\t\t\ttype=\"plus-square\"\n\t\t\t\ttheme=\"twoTone\"\n\t\t\t\ttwoToneColor=\"#65c765\"\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tus.editAAModalVisible = true;\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}}\n\t\t\t/>;\n\t\t\treturn <div style={{textAlign: \"left\"}}>\n\t\t\t\t<Descriptions\n\t\t\t\t\ttitle={\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\tAccount Summary  <Button onClick={() => us.editAccountModalVisible = true}>\n\t\t\t\t\t\t\t\t<Icon type=\"edit\" theme=\"twoTone\"></Icon>\n\t\t\t\t\t\t\t</Button>  <Popconfirm\n\t\t\t\t\t\t\t\ttitle=\"Are you sure you want to delete this account?\"\n\t\t\t\t\t\t\t\tokText=\"Yes\"\n\t\t\t\t\t\t\t\tcancelText=\"No\"\n\t\t\t\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Button>\n\t\t\t\t\t\t\t\t\t<Icon type=\"delete\" theme=\"twoTone\" twoToneColor=\"#d43348\"/>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Popconfirm>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t}\n\t\t\t\t\tbordered\n\t\t\t\t>\n\t\t\t\t\t<Descriptions.Item label=\"Name\">{acc.name}</Descriptions.Item>\n\t\t\t\t\t<Descriptions.Item label=\"Balance\">${acc.balance}</Descriptions.Item>\n\t\t\t\t</Descriptions>\n\t\t\t\t<br/>\n\t\t\t\t<Collapse>\n\t\t\t\t\t<Collapse.Panel header=\"Transfers\" key=\"transfers\" extra={addTransfer}>\n\t\t\t\t\t\t<TransferList rs={this.props.rs}></TransferList>\n\t\t\t\t\t</Collapse.Panel>\n\t\t\t\t\t<Collapse.Panel header=\"Transactions\" key=\"transactions\" extra={addTransaction}>\n\t\t\t\t\t\t<TransactionList rs={this.props.rs}/>\n\t\t\t\t\t</Collapse.Panel>\n\t\t\t\t\t<Collapse.Panel header=\"Asset Allocation\" key=\"aa\" extra={addAA}>\n\t\t\t\t\t\t<AssetAllocationList rs={this.props.rs}/>\n\t\t\t\t\t</Collapse.Panel>\n\t\t\t\t</Collapse>\n\t\t\t</div>;\n\t\t}\n\t}\n}\n","import { Account } from \"../../model/Account\";\nimport { observer } from \"mobx-react\";\nimport RootStore from \"../../stores/RootStore\";\nimport React from \"react\";\nimport { Empty, Statistic } from \"antd\";\n\n\nexport const AccountDashboard = observer((props: {rs: RootStore}) => {\n\tconst us = props.rs.us;\n\tif (us.selectedAccount === \"\") {\n\t\treturn <div style={{textAlign: \"center\"}}>\n\t\t\t<Empty description=\"Select an account\"/>\n\t\t</div>;\n\t} else {\n\t\tconst acc = props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\t\tconst currVal = acc.currentValue();\n\t\tconst dollarReturn = currVal - acc.principal;\n\t\tconst pctReturn = dollarReturn / acc.principal * 100;\n\t\treturn <div>\n\t\t\t<Statistic title=\"Principal\" prefix=\"$\" value={acc.principal} precision={2}/>\n\t\t\t<Statistic title=\"Current Value\" prefix=\"$\" value={currVal} precision={2}/>\n\t\t\t<Statistic title=\"Return\" prefix=\"$\" value={dollarReturn} precision={2}/>\n\t\t\t<Statistic title=\"Return (%)\" suffix=\"%\" value={pctReturn} precision={2}/>\n\t\t\t<Statistic title=\"Annual Return (%)\" suffix=\"%\" value={acc.xirr * 100} precision={2}/>\n\t\t</div>\n\t}\n});\n","import { observer } from \"mobx-react\";\nimport RootStore from \"../stores/RootStore\";\nimport { Button, Table } from \"antd\";\nimport React from \"react\";\nimport { Ticker } from \"../model/Ticker\";\nimport Quote from \"../model/Quote\";\n\n\n\nexport const SecuritiesInfo = observer((props: {rs: RootStore}) => {\n\tconst qs = props.rs.qs;\n\tconst ps = props.rs.ps;\n\tconst data = Array.from(props.rs.ps.tickers).map((tickString: string) => {\n\t\tconst t = Ticker.fromString(tickString)\n\t\treturn {\n\t\t\tticker: t,\n\t\t\tquote: qs.getQuote(t),\n\t\t\tcategory: ps.getCategory(t)\n\t\t}\n\t});\n\treturn <Table dataSource={data} rowKey={r => r.ticker.asString}>\n\t\t<Table.Column\n\t\t\ttitle=\"Asset\"\n\t\t\tdataIndex=\"ticker\"\n\t\t\trender={(t: Ticker) => t.asString}\n\t\t/>\n\t\t<Table.Column\n\t\t\ttitle=\"Price\"\n\t\t\tdataIndex=\"quote\"\n\t\t\trender={(q: Quote) => q.price ? q.price : \"Unknown\"}\n\t\t/>\n\t\t<Table.Column\n\t\t\ttitle=\"Category\"\n\t\t\tdataIndex=\"category\"\n\t\t/>\n\t\t<Table.Column\n\t\t\ttitle=\"\"\n\t\t\tdataIndex=\"ticker\"\n\t\t\trender={(t: Ticker) => <Button\n\t\t\t\ticon=\"edit\"\n\t\t\t/>}\n\t\t\tkey=\"edit\"\n\t\t/>\n\t</Table>\n});\n","import React, { Component } from \"react\";\nimport RootStore from \"../../stores/RootStore\";\nimport { observer } from \"mobx-react\";\nimport { Empty } from \"antd\";\nimport { Account } from \"../../model/Account\";\nimport QuoteStore from \"../../stores/QuoteStore\";\nimport { Ticker } from \"../../model/Ticker\";\nimport { QuoteStatus } from \"../../model/Quote\";\n\n@observer\nexport default class AccountBalancer extends Component<{rs: RootStore}> {\n\trender() {\n\t\t// grab asset list, merge with aa target list.\n\t\t// warn if some prices could not be found.\n\t\t// put all in to balancer, (0 aa for owned not on aa list)\n\t\t// output list of transactions needed\n\t\tconst qs = QuoteStore.getInstance();\n\t\tconst us = this.props.rs.us;\n\t\tif (us.selectedAccount === \"\") {\n\t\t\treturn <div style={{textAlign: \"center\"}}>\n\t\t\t\t<Empty description=\"Select an account\"/>\n\t\t\t</div>;\n\t\t}\n\t\tconst acc = this.props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\t\tconst totalValue = acc.currentValue();\n\n\t\t// Populate asset list\n\t\tconst assets = new Set<string>();\n\t\tconst aaMap = new Map<string, number>();  // todo: asset allocations should just be refactored to map\n\t\tacc.assets.forEach((_, ticker) => assets.add(ticker));\n\t\tacc.assetAllocation.forEach(aa => {\n\t\t\tassets.add(aa.ticker.asString);\n\t\t\taaMap.set(aa.ticker.asString, aa.portion);\n\t\t});\n\n\t\tconst ideals = new Array<number>();\n\t\tconst costs = new Array<number>();\n\n\t\tassets.forEach(t => {\n\t\t\tconst quote = qs.getQuote(Ticker.fromString(t));\n\t\t\tif (quote.price !== undefined && (quote.status === QuoteStatus.Filled || quote.status === QuoteStatus.UserSpecified)) {\n\t\t\t\tcosts.push(quote.price);\n\t\t\t\tideals.push((aaMap.has(t) ? aaMap.get(t) as number : 0) * totalValue);\n\t\t\t}\n\t\t});\n\n\t\tif (costs.length !== assets.size) {\n\t\t\treturn <div>Not all prices have been fetched!</div>;\n\t\t}\n\n\t\treturn <div>\n\t\t\tplaceholder\n\t\t</div>;\n\t}\n}\n","import { observer } from \"mobx-react\";\nimport RootStore from \"../../stores/RootStore\";\nimport React from \"react\";\nimport { Tabs, Icon } from \"antd\";\nimport AccountDetails from \"./AccountDetails\";\nimport { AccountDashboard } from \"./AccountDashboard\";\nimport { SecuritiesInfo } from \"../SecuritiesInfo\";\nimport AccountBalancer from \"./AccountBalancer\";\n\n\nexport const DisplayTabs = observer((props: {rs: RootStore}) => {\n\tconst us = props.rs.us;\n\tconst onClick = (key: string) => {\n\t\tus.currentTab = key;\n\t};\n\treturn <Tabs activeKey={us.currentTab} onTabClick={onClick}>\n\t\t<Tabs.TabPane tab={\n\t\t\t<span>\n\t\t\t\t<Icon type=\"bar-chart\"/>\n\t\t\t\tDashboard\n\t\t\t</span>}\n\t\t\tkey=\"dashboard\"\n\t\t>\n\t\t\t<AccountDashboard rs={props.rs}/>\n\t\t</Tabs.TabPane>\n\t\t<Tabs.TabPane tab={\n\t\t\t<span>\n\t\t\t\t<Icon type=\"unordered-list\"/>\n\t\t\t\tDetails\n\t\t\t</span>}\n\t\t\tkey=\"details\"\n\t\t>\n\t\t\t<AccountDetails rs={props.rs}/>\n\t\t</Tabs.TabPane>\n\t\t<Tabs.TabPane tab={\n\t\t\t<span>\n\t\t\t\t<Icon type=\"info-circle\"/>\n\t\t\t\tSecurities Info\n\t\t\t</span>}\n\t\t\tkey=\"sec-info\"\n\t\t>\n\t\t\t<SecuritiesInfo rs={props.rs}/>\n\t\t</Tabs.TabPane>\n\t\t<Tabs.TabPane tab={\n\t\t\t<span>\n\t\t\t\t<Icon type=\"control\"/>\n\t\t\t\tRebalance\n\t\t\t</span>}\n\t\t\tkey=\"rebalance\"\n\t\t>\n\t\t\t<AccountBalancer rs={props.rs}/>\n\t\t</Tabs.TabPane>\n\t</Tabs>;\n});\n","import RootStore from \"../../stores/RootStore\";\nimport React, { Component } from \"react\";\nimport { Modal, Form, DatePicker, InputNumber } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { observer } from \"mobx-react\";\nimport moment, { Moment } from \"moment\";\nimport Transfer from \"../../model/Transfer\";\nimport { Account } from \"../../model/Account\";\nimport shortid from \"shortid\";\n\n\ninterface Props {\n\trs: RootStore\n};\n\n@observer\nclass EditTransferModal extends Component<Props & FormComponentProps> {\n\tprivate action: string = \"\";\n\tprivate value: number = 0;\n\tprivate date: Moment = moment();\n\n\tconstructor(props: Props & FormComponentProps) {\n\t\tsuper(props);\n\t\tthis.onCancel = this.onCancel.bind(this);\n\t\tthis.onOk = this.onOk.bind(this);\n\t}\n\n\tonCancel() {\n\t\tthis.props.rs.us.editTransferModalVisible = false\n\t\tthis.props.rs.us.currentTransfer = undefined;\n\t\tthis.props.form.resetFields();\n\t}\n\n\tonOk() {\n\t\tconst us = this.props.rs.us;\n\t\tconst value = this.props.form.getFieldValue(\"value\");\n\t\tconst date = this.props.form.getFieldValue(\"date\") as Moment;\n\t\tconst acc = this.props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\t\tif (this.props.rs.us.currentTransfer) {\n\t\t\tthis.props.rs.us.currentTransfer.value = value;\n\t\t\tthis.props.rs.us.currentTransfer.date = date.toDate();\n\t\t} else {\n\t\t\tif (acc) {\n\t\t\t\tacc.transfers.push(new Transfer(value, date.toDate(), shortid.generate()));\n\t\t\t}\n\t\t}\n\t\tthis.onCancel();\n\t\tconsole.log(acc);\n\t\tacc.sortTransfers();\n\t}\n\n\tprepNew() {\n\t\tthis.action = \"Create\";\n\t\tthis.value = 0;\n\t\tthis.date = moment();\n\t}\n\n\tprepEdit() {\n\t\tthis.action = \"Edit\";\n\t\tconst t = this.props.rs.us.currentTransfer as Transfer;\n\t\tthis.value = t.value;\n\t\tthis.date = moment(t.date);\n\t}\n\n\trender() {\n\t\tconst us = this.props.rs.us;\n\t\tconst { getFieldDecorator } = this.props.form;\n\t\tif (us.currentTransfer) {\n\t\t\tthis.prepEdit();\n\t\t} else {\n\t\t\tthis.prepNew();\n\t\t}\n\t\treturn <Modal\n\t\t\tcentered\n\t\t\tvisible={us.editTransferModalVisible}\n\t\t\ttitle={this.action + \" transfer\"}\n\t\t\tonCancel={this.onCancel}\n\t\t\tonOk={this.onOk}\n\t\t>\n\t\t\t<Form layout=\"vertical\">\n\t\t\t\t<Form.Item label=\"Value\">\n\t\t\t\t\t{ getFieldDecorator(\"value\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input transfer value\"}],\n\t\t\t\t\t\tinitialValue: `${this.value}`\n\t\t\t\t\t})(<InputNumber precision={2}/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Date\">\n\t\t\t\t\t{ getFieldDecorator(\"date\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input date\"}],\n\t\t\t\t\t\tinitialValue: this.date\n\t\t\t\t\t})(<DatePicker format=\"MMMM Do YYYY\"/>)}\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Modal>;\n\t}\n}\n\nexport default Form.create<Props & FormComponentProps>()(EditTransferModal);\n","import RootStore from \"../../stores/RootStore\";\nimport React, { Component } from \"react\";\nimport { Modal, Form, InputNumber, Input, DatePicker } from \"antd\";\nimport moment, { Moment } from \"moment\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { observer } from \"mobx-react\";\nimport { Account } from \"../../model/Account\";\nimport { Transaction } from \"../../model/Transaction\";\nimport { Ticker } from \"../../model/Ticker\";\nimport shortid from \"shortid\";\n\n\ninterface Props {\n\trs: RootStore\n};\n\n@observer\nclass EditTransactionModal extends Component<Props & FormComponentProps> {\n\tprivate action: string = \"\";\n\tprivate quantity: number = 0;\n\tprivate exchange: string = \"\";\n\tprivate symbol: string = \"\";\n\tprivate unitPrice: number = 0;\n\tprivate date: Moment = moment();\n\n\tconstructor(props: Props & FormComponentProps) {\n\t\tsuper(props);\n\t\tthis.onCancel = this.onCancel.bind(this);\n\t\tthis.onOk = this.onOk.bind(this);\n\t}\n\n\tonCancel() {\n\t\tthis.props.rs.us.editTransactionModalVisible = false\n\t\tthis.props.rs.us.currentTransaction = undefined;\n\t\tthis.props.form.resetFields();\n\t}\n\n\tonOk() {\n\t\tconst us = this.props.rs.us;\n\t\tconst form = this.props.form;\n\t\tconst quantity: number = form.getFieldValue(\"quantity\");\n\t\tconst exchange: string = form.getFieldValue(\"exchange\");\n\t\tconst symbol: string = form.getFieldValue(\"symbol\");\n\t\tconst unitPrice: number = form.getFieldValue(\"price\");\n\t\tconst date = this.props.form.getFieldValue(\"date\") as Moment;\n\t\tif (this.props.rs.us.currentTransaction) {\n\t\t\tconst ct = this.props.rs.us.currentTransaction;\n\t\t\tct.quantity = quantity;\n\t\t\tct.ticker.exchange = exchange;\n\t\t\tct.ticker.symbol = symbol;\n\t\t\tct.unitPrice = unitPrice;\n\t\t\tct.date = date.toDate();\n\t\t} else {\n\t\t\tconst acc = this.props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\t\t\tif (acc) {\n\t\t\t\tconst tick = new Ticker(exchange, symbol);\n\t\t\t\tacc.transactions.push(new Transaction(tick, quantity, unitPrice, shortid.generate(), date.toDate()));\n\t\t\t}\n\t\t}\n\t\tthis.onCancel();\n\t}\n\n\tprepNewAccount() {\n\t\tthis.action = \"Create\";\n\t\tthis.quantity = 0;\n\t\tthis.exchange = \"\";\n\t\tthis.symbol = \"\";\n\t\tthis.unitPrice = 0;\n\t\tthis.date = moment();\n\t}\n\n\tprepEditAccount() {\n\t\tconst t = this.props.rs.us.currentTransaction as Transaction;\n\t\tthis.action = \"Edit\";\n\t\tthis.quantity = t.quantity;\n\t\tthis.exchange = t.ticker.exchange;\n\t\tthis.symbol = t.ticker.symbol;\n\t\tthis.unitPrice = t.unitPrice;\n\t\tthis.date = moment(t.date);\n\t}\n\n\trender() {\n\t\tconst us = this.props.rs.us;\n\t\tconst { getFieldDecorator } = this.props.form;\n\t\tif (us.currentTransaction) {\n\t\t\tthis.prepEditAccount();\n\t\t} else {\n\t\t\tthis.prepNewAccount();\n\t\t}\n\t\treturn <Modal\n\t\t\tcentered\n\t\t\tvisible={us.editTransactionModalVisible}\n\t\t\ttitle={this.action + \" transaction\"}\n\t\t\tonCancel={this.onCancel}\n\t\t\tonOk={this.onOk}\n\t\t>\n\t\t\t<Form layout=\"vertical\">\n\t\t\t\t<Form.Item label=\"Quantity\">\n\t\t\t\t\t{ getFieldDecorator(\"quantity\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input transfer quantity\"}],\n\t\t\t\t\t\tinitialValue: `${this.quantity}`\n\t\t\t\t\t})(<InputNumber precision={0}/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Exchange\">\n\t\t\t\t\t{ getFieldDecorator(\"exchange\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input exchange\"}],\n\t\t\t\t\t\tinitialValue: this.exchange\n\t\t\t\t\t})(<Input/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Symbol\">\n\t\t\t\t\t{ getFieldDecorator(\"symbol\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input symbol\"}],\n\t\t\t\t\t\tinitialValue: this.symbol\n\t\t\t\t\t})(<Input/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Unit Price\">\n\t\t\t\t\t{ getFieldDecorator(\"price\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input unit price\"}],\n\t\t\t\t\t\tinitialValue: `${this.unitPrice}`\n\t\t\t\t\t})(<InputNumber precision={2}/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Date\">\n\t\t\t\t\t{ getFieldDecorator(\"date\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input date\"}],\n\t\t\t\t\t\tinitialValue: this.date\n\t\t\t\t\t})(<DatePicker format=\"MMMM Do YYYY\"/>)}\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Modal>;\n\t}\n}\n\nexport default Form.create<Props & FormComponentProps>()(EditTransactionModal);\n","import RootStore from \"../../stores/RootStore\";\nimport React, { Component } from \"react\";\nimport { Modal, Form, InputNumber, Input, message } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { observer } from \"mobx-react\";\nimport { Account } from \"../../model/Account\";\nimport AssetAllocation from \"../../model/AssetAllocation\";\nimport { Ticker } from \"../../model/Ticker\";\n\n\ninterface Props {\n\trs: RootStore\n};\n\n@observer\nclass EditAssetAllocationModal extends Component<Props & FormComponentProps> {\n\tprivate action: string = \"\";\n\tprivate exchange: string = \"\";\n\tprivate symbol: string = \"\";\n\tprivate value: number = 0;\n\n\tconstructor(props: Props & FormComponentProps) {\n\t\tsuper(props);\n\t\tthis.onCancel = this.onCancel.bind(this);\n\t\tthis.onOk = this.onOk.bind(this);\n\t}\n\n\tonCancel() {\n\t\tthis.props.rs.us.editAAModalVisible = false\n\t\tthis.props.rs.us.currentAssetAllocation = undefined;\n\t\tthis.props.form.resetFields();\n\t}\n\n\tonOk() {\n\t\tconst us = this.props.rs.us;\n\t\tconst value = this.props.form.getFieldValue(\"alloc\");\n\t\tconst exchange: string = this.props.form.getFieldValue(\"exchange\");\n\t\tconst symbol: string = this.props.form.getFieldValue(\"symbol\");\n\t\tconst acc = this.props.rs.ps.accounts.get(us.selectedAccount) as Account;\n\t\tconst t = new Ticker(exchange, symbol);\n\t\tconst findDuplicate = () => acc.assetAllocation.find(\n\t\t\taa => aa.ticker.isEqual(t)\n\t\t);\n\t\tif (us.currentAssetAllocation) {\n\t\t\tconst dupe = findDuplicate();\n\t\t\tconst aa = us.currentAssetAllocation;\n\t\t\tif (dupe && !aa.ticker.isEqual(dupe.ticker)) {\n\t\t\t\tmessage.error(\"The same asset cannot have multiple entries\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\taa.portion = value / 100;\n\t\t\t\taa.ticker = t;\n\t\t\t}\n\t\t} else {\n\t\t\tconst dupe = findDuplicate();\n\t\t\tif (dupe) {\n\t\t\t\tmessage.error(\"The same asset cannot have multiple entries\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tacc.assetAllocation.push(new AssetAllocation(t, value / 100));\n\t\t}\n\t\tthis.onCancel();\n\t}\n\n\tprepNew() {\n\t\tthis.action = \"Create\";\n\t\tthis.exchange = \"\";\n\t\tthis.symbol = \"\";\n\t\tthis.value = 0;\n\t}\n\n\tprepEdit() {\n\t\tthis.action = \"Edit\";\n\t\tconst aa = this.props.rs.us.currentAssetAllocation as AssetAllocation\n\t\tthis.exchange = aa.ticker.exchange;\n\t\tthis.symbol = aa.ticker.symbol;\n\t\tthis.value = aa.portion * 100;\n\t}\n\n\trender() {\n\t\tconst us = this.props.rs.us;\n\t\tconst { getFieldDecorator } = this.props.form;\n\t\tif (us.currentAssetAllocation) {\n\t\t\tthis.prepEdit();\n\t\t} else {\n\t\t\tthis.prepNew();\n\t\t}\n\t\treturn <Modal\n\t\t\tcentered\n\t\t\tvisible={us.editAAModalVisible}\n\t\t\ttitle={this.action + \" asset allocation\"}\n\t\t\tonCancel={this.onCancel}\n\t\t\tonOk={this.onOk}\n\t\t>\n\t\t\t<Form layout=\"vertical\">\n\t\t\t\t<Form.Item label=\"Exchange\">\n\t\t\t\t\t{ getFieldDecorator(\"exchange\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input exchange\"}],\n\t\t\t\t\t\tinitialValue: this.exchange\n\t\t\t\t\t})(<Input/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Symbol\">\n\t\t\t\t\t{ getFieldDecorator(\"symbol\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input symbol\"}],\n\t\t\t\t\t\tinitialValue: this.symbol\n\t\t\t\t\t})(<Input/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item label=\"Allocation (%)\">\n\t\t\t\t\t{ getFieldDecorator(\"alloc\", {\n\t\t\t\t\t\trules: [{ required: true, message: \"Input allocation\"}],\n\t\t\t\t\t\tinitialValue: `${this.value}`\n\t\t\t\t\t})(<InputNumber precision={2}/>)}\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Modal>;\n\t}\n}\n\nexport default Form.create<Props & FormComponentProps>()(EditAssetAllocationModal);\n","import React from 'react';\nimport './App.css';\nimport { Account } from './model/Account';\nimport { Layout, Row, Col, message } from 'antd';\nimport Header from './components/Header';\nimport { ProfileStore } from './stores/ProfileStore';\nimport RootStore from './stores/RootStore';\nimport UiStore from './stores/UiStore';\nimport QuoteStore from './stores/QuoteStore';\nimport { StartModal } from './components/profile/StartModal';\nimport { LoadModal } from './components/profile/LoadModal';\nimport EditProfileModal from './components/profile/EditProfileModal';\nimport { ExportModal } from './components/profile/ExportModal';\nimport EditAccountModal from './components/account/EditAccountModal';\nimport AccountSelector from './components/account/AccountSelector';\nimport { DisplayTabs } from './components/account/DisplayTabs';\nimport shortid from 'shortid';\nimport EditTransferModal from './components/transfer/EditTransferModal';\nimport EditTransactionModal from './components/transaction/EditTransactionModal';\nimport EditAssetAllocationModal from './components/assetallocation/EditAssetAllocationModal';\nconst { Content, Footer } = Layout;\n\n\nlet accs: Account[] = [\n\tnew Account(\"Your Account\", [], [], [], 0, shortid.generate())\n];\n\nlet accMap: Map<string, Account> = new Map<string, Account>();\naccs.forEach(a => accMap.set(a.id, a));\n\nlet us = new UiStore();\nlet ps = new ProfileStore(\"My Portfolio\", accMap, new Map<string, string>(), us);\nlet rs = new RootStore(ps, us, QuoteStore.getInstance());\nmessage.config({\n\ttop: 70\n});\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout style={{ minHeight: \"100vh\" }}>\n\t\t\t\t<Header rs={rs}></Header>\n\t\t\t\t<Content>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div style={{ margin: \"0 10px\" }}>\n\t\t\t\t\t\t\t\tAccount: <AccountSelector rs={rs} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<div style={{ margin: \"0 10px\"}}>\n\t\t\t\t\t\t<DisplayTabs rs={rs}/>\n\t\t\t\t\t</div>\n\t\t\t\t</Content>\n\t\t\t\t<Footer>this is the footer</Footer>\n\t\t\t</Layout>\n\t\t\t<StartModal rs={rs}/>\n\t\t\t<LoadModal rs={rs}/>\n\t\t\t<EditProfileModal rs={rs}/>\n\t\t\t<ExportModal rs={rs}/>\n\t\t\t<EditAccountModal rs={rs}/>\n\t\t\t<EditTransferModal rs={rs}/>\n\t\t\t<EditTransactionModal rs={rs}/>\n\t\t\t<EditAssetAllocationModal rs={rs}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ProfileStore } from \"./ProfileStore\";\nimport UiStore from \"./UiStore\";\nimport QuoteStore from \"./QuoteStore\";\n\n\nexport default class RootStore {\n\tps: ProfileStore;\n\tus: UiStore;\n\tqs: QuoteStore;\n\n\tconstructor(ps: ProfileStore, us: UiStore, qs: QuoteStore) {\n\t\tthis.ps = ps;\n\t\tthis.us = us;\n\t\tthis.qs = qs;\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndocument.title = \"Portfolio Manager\";\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}